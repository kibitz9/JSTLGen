
float getDistA(in vec3 q){


    vec3 p = vec3(
        q.x*cos(iTime/7.0)+q.z*-sin(iTime/7.0),
        q.y
        ,q.z*cos(iTime/7.0)+q.x*sin(iTime/7.0)
        );

    //float s = length(p) - 1.0;
   // return s;
	vec3 scale1=p/0.5;
	float onion1=0.25;
	float onion2=1.0;
	float onion3=4.0;
	float radius1 =10.0;
	float a2=scale1.x+0.0;
	float b2=abs(abs(abs(length(scale1)-radius1)-onion3)-onion2)-onion1;
	float k2=2.0;
	float h2=max(k2-abs(a2-b2),0.0);
	float zz2= (1.0 / 6.0) / (k2*k2);
	float a1=-scale1.x+-5.0;
	float b1=max(a2,b2)+h2*h2*h2*zz2;
	float k1=2.0;
	float h1=max(k1-abs(a1-b1),0.0);
	float zz1= (1.0 / 6.0) / (k1*k1);
	float cosTheta1=cos(iTime/2.0);
	float sinTheta1=sin(iTime/2.0);
	vec3 rot1=vec3(p.x,p.y*cosTheta1+p.z*sinTheta1,p.z*cosTheta1+p.y*-sinTheta1);
	vec3 box1=vec3(100.0,0.5,100.0);
	vec3 q1=abs(rot1)-box1;
	float a3=-(length(max(q1,0.0))+min(max(q1.x,max(q1.y,q1.z)),0.0));
	float b3=length(vec2(length(rot1.xz)-10.0,rot1.y))-1.0;
	float k3=0.1;
	float h3=max(k3-abs(a3-b3),0.0);
	float zz3= (1.0 / 6.0) / (k3*k3);
	float cosTheta2=cos(iTime/3.0);
	float sinTheta2=sin(iTime/3.0);
	vec3 rot2=vec3(p.x*cosTheta2+p.y*-sinTheta2,p.y*cosTheta2+p.x*sinTheta2,p.z);
	float cosTheta3=cos(iTime/10.0);
	float sinTheta3=sin(iTime/10.0);
    vec3 rot3=vec3(p.x*cosTheta3+p.z*+sinTheta3,p.y,p.z*cosTheta3+p.x*-sinTheta3);
	vec3 box2=vec3(100.0,100.0,1.0);
	vec3 q2=abs(rot3)-box2;
	float a4=-(length(max(q2,0.0))+min(max(q2.x,max(q2.y,q2.z)),0.0));
	float b4=length(vec2(length(rot3.xz)-4.0,rot3.y))-0.25;
	float k4=0.1;
	float h4=max(k4-abs(a4-b4),0.0);
	float zz4= (1.0 / 6.0) / (k4*k4);
	float returnValue= min(min(min((max(a1,b1)+h1*h1*h1*zz1)*0.5,max(a3,b3)+h3*h3*h3*zz3),length(vec2(length(rot2.xz)-8.0,rot2.y))-0.5),max(a4,b4)+h4*h4*h4*zz4);
    //returnValue = (returnValue)+.125;
    return returnValue*1.0;
}


float getDistABrainThing(in vec3 q){


    vec3 p = vec3(
        q.x*cos(iTime/7.0)+q.z*-sin(iTime/7.0),
        q.y
        ,q.z*cos(iTime/7.0)+q.x*sin(iTime/7.0)
        );

    //float s = length(p) - 1.0;
   // return s;
	vec3 scale1=p/2.0;
	float onion1=0.01;
	float scaleA2=7.518796992481203;
	float scaleB2=7.518796992481203;
	float offsetA2=0.0;
	float offsetB2=0.0;
	float scaleA1=2.0;
	float scaleB1=2.0;
	float offsetA1=0.0;
	float offsetB1=0.0;
	float a2=-(abs(dot(sin(scale1.xyz*scaleA2+offsetA2),cos(scale1.yzx*scaleB2+offsetB2)))-onion1);
	float b2=dot(sin(scale1.xyz*scaleA1+offsetA1),cos(scale1.yzx*scaleB1+offsetB1));
	float k2=1.0;
	float h2=max(k2-abs(a2-b2),0.0);
	float zz2= (1.0 / 6.0) / (k2*k2);
	float radius1 =5.0;
	float a1=(max(a2,b2)+h2*h2*h2*zz2);
	float b1=length(scale1)-radius1;
	float k1=1.0;
	float h1=max(k1-abs(a1-b1),0.0);
	float zz1= (1.0 / 6.0) / (k1*k1);
	float returnValue= (max(a1,b1)+h1*h1*h1*zz1)*2.0;
    return returnValue;
    //returnValue = (returnValue)+.125;
    //return returnValue*1.0;
}

float getDistACubeSphere(in vec3 q){

    vec3 p=q;

    float lookDown=.2;
    p=vec3(p.x,p.y*cos(lookDown)+p.z*-sin(lookDown),p.z*cos(lookDown)+p.y*sin(lookDown));

    float rot = .25;

     p =vec3(
        p.x*cos(iTime/rot)+p.z*-sin(iTime/rot),
        p.y
        ,p.z*cos(iTime/rot)+p.x*sin(iTime/rot)
        );

    p=p+vec3(0.,-2.,0.);
    


//**************************
vec3 q1=p+vec3(-0.0,20.0,-0.0);
	vec3 box1=vec3(1000.0,10.0,1000.0);
	vec3 q2=abs(q1)-box1;
	vec3 q3=p+vec3(-0.0,4.0,-0.0);
	vec3 box2=vec3(5.0,5.0,5.0);
	vec3 q4=abs(q3)-box2;
	float roundAmnt1=1.0;
	vec3 q5=p+vec3(-0.0,-4.0,-0.0);
	float radius1 =3.0;
	return min(min(length(max(q2,0.0))+min(max(q2.x,max(q2.y,q2.z)),0.0),(length(max(q4,0.0))+min(max(q4.x,max(q4.y,q4.z)),0.0))-roundAmnt1),length(q5)-radius1);
    
    
 }
    

float getDist(in vec3 q){
    return getDistA(q)*.3;
}

//float MAX_STEPS = 80.0;
float MAX_DIST = 500.0;

vec3 eye = vec3(0.0,0.0,-.5);
vec3 lense = vec3(0.0,0.0,.5);
vec3 cameraPosition = vec3(0,0,-40);


vec3 getSurfaceNormal(vec3 p, float epsilon){
    float epsilon2 = epsilon/10.0;
    vec3 xPlus = vec3(p.x+epsilon2,p.y,p.z);
    vec3 xMinus = vec3(p.x-epsilon2,p.y,p.z);
    vec3 yPlus = vec3(p.x,p.y+epsilon2,p.z);
    vec3 yMinus = vec3(p.x,p.y-epsilon2,p.z);
    vec3 zPlus = vec3(p.x,p.y,p.z+epsilon2);
    vec3 zMinus = vec3(p.x,p.y,p.z-epsilon2);
    
    float slopex = getDist(xPlus)-getDist(xMinus);
    float slopey = getDist(yPlus)-getDist(yMinus);
    float slopez = getDist(zPlus)-getDist(zMinus);
    return normalize(vec3(slopex,slopey,slopez));
}

void rayMarchOK(
    in vec3 origin, 
    in vec3 ray, 
    in float epsilon,
    in float maxSteps,
    out vec3 marchPosition,
    out float stepsTaken,
    out float finalDist,
    out float totalDist,
    out float closestDist
){
    //raymarcher will always attempt to go the entire distance.
    //if the distance field is not even, reduce the distance returned
    //from that field by a resonable percentage to avoid any overstep.
    
    float minDist=10.;
    marchPosition=origin+ray*minDist;
    
    float h = getDist(marchPosition);
    stepsTaken = 0.0;
    closestDist=MAX_DIST;
    
    
    
    while (h>epsilon&&stepsTaken++<maxSteps&&h<MAX_DIST){
        marchPosition+=ray*h;
        h=getDist(marchPosition);
        closestDist=min(closestDist,h);
    }
    
   
    finalDist=h;
    totalDist=length(origin-marchPosition);

}
void rayMarch(
    in vec3 origin, 
    in vec3 ray, 
    in float epsilon,
    in float maxSteps,
    
    out vec3 marchPoint,//intersection point or off somehwhere in space
    out float marchPointDist,//distance of the end of our ray from the nearest object
    out float stepsTaken//how many steps it took to determine what happened.


){
    //raymarcher will always attempt to go the entire distance.
    //if the distance field is not even, reduce the distance returned
    //from that field by a resonable percentage to avoid any overstep.
    
  
    
    stepsTaken = 0.0;
    marchPoint=origin;
    float h = getDist(marchPoint);//calculate initial distance
    while (h>epsilon&&stepsTaken++<maxSteps&&h<MAX_DIST){
        marchPoint+=ray*h;       
        h=getDist(marchPoint);
    }   
    marchPointDist=h;
}



float softShadowExperimental(vec3 p, vec3 lightSource, float epsilon, float k){
    
    float maxSteps = 900.0;
   
    vec3 marchPoint;
    float marchPointDist;
    float steps;
    vec3 ray = normalize(lightSource-p);
    rayMarch(p,ray,epsilon,maxSteps,marchPoint,marchPointDist,steps);
    if (marchPointDist<=epsilon||steps>=maxSteps){
        return 0.0;
    }
    
    return max(1.-(max(steps-k*5.,0.)*k/maxSteps),.0);
  
}


float shadow(vec3 p, vec3 lightSource, float epsilon){
    
    float maxSteps = 900.0;
   
    vec3 marchPoint;
    float marchPointDist;
    float steps;
    vec3 ray = normalize(lightSource-p);
    rayMarch(p,ray,epsilon,maxSteps,marchPoint,marchPointDist,steps);
    if (marchPointDist<=epsilon||steps>=maxSteps){
        return 0.0;
    }
    
    return 1.0;
  
}


void calcLight(
    in vec3 surfacePoint, 
    in vec3 lightPosition,
    in vec3 observationPosition,
    in vec3 lightColor,
    in float lightBrightness,
    in vec3 surfaceNormal,
    out vec3 diffuse, 
    out vec3 specular){
    
    //float ambientO=1.0-((stepsTaken/maxSteps)*(stepsTaken/maxSteps));
     
    vec3 col0 = lightColor;
    
    
    vec3 surfaceToLight=lightPosition-surfacePoint;
    vec3 normalToLight=normalize(surfaceToLight);
    
    float oneOverDistToLightSquared = lightBrightness/dot(surfaceToLight,surfaceToLight);
    
    
    
    float dp = dot(normalToLight,surfaceNormal);
    dp=max(dp,0.0);
    
    //dp+=1.0;
    //dp/=2.0;
    
    diffuse=dp*lightColor*oneOverDistToLightSquared;
    
    
    vec3 rayToObs=normalize(observationPosition-surfacePoint);
    vec3 avg = normalize(normalToLight+rayToObs);
    float spec = dot(avg,surfaceNormal);
    spec = max(spec,0.0);
    
    spec*=spec;//work in roughness here
    spec*=spec;
    spec*=spec;
    spec*=spec;
    spec*=spec;
    spec*=spec;

    specular=lightColor*spec*oneOverDistToLightSquared;//work in shinyness here
    
    float shadowAdjust = 2.0;
    
    float s = softShadowExperimental(surfacePoint,lightPosition,.00001,10.);
    diffuse*=s*shadowAdjust;
    spec*=s*shadowAdjust;
    
    
}


void mainImage( out vec4 fragColor, in vec2 fragCoord )
{

    float specAmt = 0.0;

    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
    float epsilon1 = .00004;
    
   
    vec3 objColor=vec3(1,1,1);
    
    //vec3 lightPosition1 = vec3(600.0,400.0,-400.0);
   // vec3 lightColor1 = vec3(0,0,0);
    
   // vec3 lightPosition2 = vec3(-400.0,400.0,-400.0);
   // vec3 lightColor2 = vec3(1.0,.9,.9);
    
    
    vec2 ar = (fragCoord/iResolution.x)
        -vec2(.5,iResolution.y/(2.0*iResolution.x));
    vec3 lenseIntersection = vec3(ar,lense.z);
    
    vec3 ray = normalize(lenseIntersection-eye);
   
    
    float stepsTaken;
    vec3 finalPosition;
    float finalDistance;

    float maxSteps = 4000.0;
    
    rayMarch(eye+cameraPosition,ray,epsilon1,maxSteps,finalPosition,finalDistance,stepsTaken);
    
    
    
    //float dpl1 = dot(normalize(lightPosition1),normal);//inifinite distance light
    //dpl1+=1.0;
    //dpl1/=2.0;
    //float dpl1Spec = dpl1*dpl1*dpl1*dpl1*dpl1*dpl1;
    //dpl1+=dpl1Spec*specAmt;
    
    
    //float dpl2 = dot(normalize(lightPosition2),normal);//inifinite distance light
    //dpl2+=1.0;
    //dpl2/=2.0;
    //float dpl2Spec = dpl2*dpl2*dpl2*dpl2*dpl2*dpl2;
    //dpl2+=dpl2Spec*specAmt;
    
    
    
    
    if (finalDistance<epsilon1){
    
        //we hit something. let's do a bit more work...
        //back off a slight bit...
        finalPosition = finalPosition+(ray*epsilon1*-2.0);
        vec3 normal = getSurfaceNormal(finalPosition,epsilon1);
        
        vec3 diffuse1;
        vec3 specular1;
        
        vec3 diffuse2;
        vec3 specular2;
        
        vec3 diffuse3;
        vec3 specular3;
        
        vec3 diffuse4;
        vec3 specular4;
        
        float lightBrightness = 1000000.;
        
        calcLight(
            finalPosition,
            vec3(600.0,800.0,-800.0),//lightposition
            eye+cameraPosition,//observation position
            vec3(.5,.5,1)*.5,//light color
            lightBrightness*2.,//light bright
            normal,
            diffuse1,
            specular1
        );
        
        calcLight(
            finalPosition,
            vec3(-600.0,300.0,-400.0),//lightposition
            eye+cameraPosition,//observation position
            vec3(1,.5,.1)*.5,//light color
            lightBrightness*1.,//light bright
            normal,
            diffuse2,
            specular2
        );
        
        calcLight(
            finalPosition,
            vec3(130.0,30.0,-40.0),//lightposition
            eye+cameraPosition,//observation position
            vec3(.3,.7,.3)*.5,//light color
            lightBrightness/50.,//light bright
            normal,
            diffuse3,
            specular3
        );
        
        calcLight(
            finalPosition,
            vec3(0.0,-50.0,3.0),//lightposition
            eye+cameraPosition,//observation position
            vec3(1.,.8,.5)*.5,//light color
            lightBrightness/160.,//light bright
            normal,
            diffuse4,
            specular4
        );
    
    
    
        vec3 col1=objColor*max(diffuse1,0.0);
        col1+=specular1;
        
        vec3 col2=objColor*max(diffuse2,0.0);
        col2+=specular2;
        
        vec3 col3=objColor*max(diffuse3,0.0);
        col3+=specular3;
        
        vec3 col4=objColor*max(diffuse4,0.0);
        col4+=specular4;
        
        
        //col1*=ambientO;                
        //col1 *=shadow(finalPosition,lightPosition1,epsilon1,8.);
        
        //col2*=max(dpl2,0.0);
        //col2*=ambientO;      
        
        //col2 *=shadow(finalPosition,lightPosition2,epsilon1,8.);
        
        //col1*=1.0;
       // col2*=1.0;
        
        //vec3 colFinal = min(col1+col2,1.0);
        vec3 colFinal = min(col1+col2+col3+col4,1.);
        fragColor = vec4(colFinal,1.0);
        
    }
    else{
        fragColor = vec4(0,0,0,1.0);

    }
    
    
    


    // Time varying pixel color
    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));

    // Output to screen
    
}