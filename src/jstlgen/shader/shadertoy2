



float df2(in vec3 p){

	//Torus1
	float primaryRadius1=7.0;
	float secondaryRadius1=1.0;
	float cosTheta1=6.123234E-17;
	float sinTheta1=1.0;
	vec3 rot1=vec3(p.x,p.y*cosTheta1+p.z*sinTheta1,p.z*cosTheta1+p.y*-sinTheta1);
	//Torus2
	float primaryRadius2=7.0;
	float secondaryRadius2=1.0;
	float unionleft1=length(vec2(length(p.xz)-primaryRadius1,p.y))-secondaryRadius1;
	float unionRight1=length(vec2(length(rot1.xz)-primaryRadius2,rot1.y))-secondaryRadius2;
	vec3 q3=p+vec3(-0.0,4.0,-0.0);
	//Box2
	vec3 box2=vec3(5.0,5.0,5.0);
	vec3 q4=abs(q3)-box2;
	float roundAmnt1=1.0;
	vec3 q5=p+vec3(-0.0,-4.0,-0.0);
	//Sphere1
	float radius1 =3.0;
	float unionleft2=(length(max(q4,0.0))+min(max(q4.x,max(q4.y,q4.z)),0.0))-roundAmnt1;
	float unionRight2=length(q5)-radius1;
	float unionleft3=min(unionleft1,unionRight1);
	float unionRight3=min(unionleft2,unionRight2);

	return min(unionleft3,unionRight3);
}
float df1(in vec3 p){

	float boundrymin2=-1010.0;
	float boundrymax2=1010.0;
	float width2=20.0;
	float px1=p.x;
	float outsidemovebefore2=1000.0;
	float outsidemoveafter2=-1000.0;
	float calcbefore2=1.0-max(sign(px1-boundrymin2),0.0);
	float calcafter2=1.0-max(sign(boundrymax2-px1),0.0);
	float calcinside2=1.0-sign(calcbefore2+calcafter2);
	float calcoutside2=1.0-calcinside2;
	float calcleftrep2=max(sign((boundrymin2+width2)-px1),0.0);
	float calcrightrep2=max(sign(px1-(boundrymax2-width2)),0.0);
	float outside2=calcoutside2==0.0?0.0:df2(vec3(px1+outsidemovebefore2*calcbefore2+outsidemoveafter2*calcafter2,p.y,p.z));
	float px21=px1-round(px1/width2)*width2;
	float distA2=calcoutside2==1.0?0.0:df2(vec3(px21,p.y,p.z));
	float distB2=calcoutside2==1.0?0.0:calcleftrep2==1.0?999999.0:df2(vec3(px21+width2,p.y,p.z));
	float distC2=calcoutside2==1.0?0.0:calcrightrep2==1.0?999999.0:df2(vec3(px21-width2,p.y,p.z));
	float inside2=min(distA2,min(distB2,distC2));

	return (inside2*calcinside2+outside2*calcoutside2);
}
float map1(vec3 p){

	vec3 q1=p+vec3(-0.0,20.0,-0.0);
	//Box1
	vec3 box1=vec3(1000.0,10.0,1000.0);
	vec3 q2=abs(q1)-box1;
	float boundrymin1=-1010.0;
	float boundrymax1=1010.0;
	float width1=20.0;
	float pz1=p.z;
	float outsidemovebefore1=1000.0;
	float outsidemoveafter1=-1000.0;
	float calcbefore1=1.0-max(sign(pz1-boundrymin1),0.0);
	float calcafter1=1.0-max(sign(boundrymax1-pz1),0.0);
	float calcinside1=1.0-sign(calcbefore1+calcafter1);
	float calcoutside1=1.0-calcinside1;
	float calcleftrep1=max(sign((boundrymin1+width1)-pz1),0.0);
	float calcrightrep1=max(sign(pz1-(boundrymax1-width1)),0.0);
	float outside1=calcoutside1==0.0?0.0:df1(vec3(p.x,p.y,pz1+outsidemovebefore1*calcbefore1+outsidemoveafter1*calcafter1));
	float pz21=pz1-round(pz1/width1)*width1;
	float distA1=calcoutside1==1.0?0.0:df1(vec3(p.x,p.y,pz21));
	float distB1=calcoutside1==1.0?0.0:calcleftrep1==1.0?999999.0:df1(vec3(p.x,p.y,pz21+width1));
	float distC1=calcoutside1==1.0?0.0:calcrightrep1==1.0?999999.0:df1(vec3(p.x,p.y,pz21-width1));
	float inside1=min(distA1,min(distB1,distC1));
	float unionleft4=length(max(q2,0.0))+min(max(q2.x,max(q2.y,q2.z)),0.0);
	float unionRight4=(inside1*calcinside1+outside1*calcoutside1);
	return min(unionleft4,unionRight4);
}




float df177(in vec3 p){

	//Torus1
	float primaryRadius1=7.0;
	float secondaryRadius1=1.0;
	float cosTheta1=6.123234E-17;
	float sinTheta1=1.0;
	vec3 rot1=vec3(p.x,p.y*cosTheta1+p.z*sinTheta1,p.z*cosTheta1+p.y*-sinTheta1);
	//Torus2
	float primaryRadius2=7.0;
	float secondaryRadius2=1.0;
	float unionleft1=length(vec2(length(p.xz)-primaryRadius1,p.y))-secondaryRadius1;
	float unionRight1=length(vec2(length(rot1.xz)-primaryRadius2,rot1.y))-secondaryRadius2;
	vec3 q3=p+vec3(-0.0,4.0,-0.0);
	//Box2
	vec3 box2=vec3(5.0,5.0,5.0);
	vec3 q4=abs(q3)-box2;
	float roundAmnt1=1.0;
	vec3 q5=p+vec3(-0.0,-4.0,-0.0);
	//Sphere1
	float radius1 =3.0;
	float unionleft2=(length(max(q4,0.0))+min(max(q4.x,max(q4.y,q4.z)),0.0))-roundAmnt1;
	float unionRight2=length(q5)-radius1;
	float unionleft3=min(unionleft1,unionRight1);
	float unionRight3=min(unionleft2,unionRight2);

	return min(unionleft3,unionRight3);
}
float map177(vec3 p){

	vec3 q1=p+vec3(-0.0,20.0,-0.0);
	//Box1
	vec3 box1=vec3(1000.0,10.0,1000.0);
	vec3 q2=abs(q1)-box1;
	float boundrymin1=-75.0;
	float boundrymax1=75.0;
	float width1=50.0;
	float px1=p.x;
	float outsidemovebefore1=50.0;
	float outsidemoveafter1=-50.0;
	float calcbefore1=1.0-max(sign(px1-boundrymin1),0.0);
	float calcafter1=1.0-max(sign(boundrymax1-px1),0.0);
    
    if (px1<boundrymin1){
        return df1(vec3(px1+outsidemovebefore1,p.y,p.z));
    }
    
    if (px1>boundrymax1){
        return df1(vec3(px1+outsidemoveafter1,p.y,p.z));
    }
    
    
    
    
    
	float calcinside1=1.0-sign(calcbefore1+calcafter1);
	float calcoutside1=1.0-calcinside1;
	float calcleftrep1=999999.0*max(sign((boundrymin1+width1)-px1),0.0);
	float calcrightrep1=999999.0*max(sign(px1-(boundrymax1-width1)),0.0);
	float outside1=df1(vec3(px1+outsidemovebefore1*calcbefore1+outsidemoveafter1*calcafter1,p.y,p.z));
	
    
    
    float px21=px1-round(px1/width1)*width1;
    
    
    
	float distA1=df1(vec3(px21,p.y,p.z));
    
    bool dontrepeatleft=false;
    bool dontrepeatright=false;
    
    if (px1<boundrymin1+width1){
        dontrepeatleft=true;
    }
    if (px1>boundrymax1-width1){
        dontrepeatright=true;
    }
    
    
    //return distA1;
	float distB1=calcleftrep1+df1(vec3(px21+width1,p.y,p.z));
	float distC1=calcrightrep1+df1(vec3(px21-width1,p.y,p.z));
    
    //distB1 = dontrepeatleft?999999.0:df1(vec3(px21+width1,p.y,p.z));
    //distC1 = dontrepeatright?99999.0:df1(vec3(px21-width1,p.y,p.z));
    
	float inside1=min(distA1,min(distB1,distC1));
    return inside1;
	float unionleft4=length(max(q2,0.0))+min(max(q2.x,max(q2.y,q2.z)),0.0);
	float unionRight4=(inside1*calcinside1+outside1*calcoutside1);
	return min(unionleft4,unionRight4);
}




///***********************



float getDistASpinny(in vec3 q){

    //a simple test object
    vec3 p = vec3(
        q.x*cos(iTime/7.0)+q.z*-sin(iTime/7.0),
        q.y
        ,q.z*cos(iTime/7.0)+q.x*sin(iTime/7.0)
        );

    //float s = length(p) - 1.0;
   // return s;
	vec3 scale1=p/0.5;
	float onion1=0.25;
	float onion2=1.0;
	float onion3=4.0;
	float radius1 =10.0;
	float a2=scale1.x+0.0;
	float b2=abs(abs(abs(length(scale1)-radius1)-onion3)-onion2)-onion1;
	float k2=2.0;
	float h2=max(k2-abs(a2-b2),0.0);
	float zz2= (1.0 / 6.0) / (k2*k2);
	float a1=-scale1.x+-5.0;
	float b1=max(a2,b2)+h2*h2*h2*zz2;
	float k1=2.0;
	float h1=max(k1-abs(a1-b1),0.0);
	float zz1= (1.0 / 6.0) / (k1*k1);
	float cosTheta1=cos(iTime/2.0);
	float sinTheta1=sin(iTime/2.0);
	vec3 rot1=vec3(p.x,p.y*cosTheta1+p.z*sinTheta1,p.z*cosTheta1+p.y*-sinTheta1);
	vec3 box1=vec3(100.0,0.5,100.0);
	vec3 q1=abs(rot1)-box1;
	float a3=-(length(max(q1,0.0))+min(max(q1.x,max(q1.y,q1.z)),0.0));
	float b3=length(vec2(length(rot1.xz)-10.0,rot1.y))-1.0;
	float k3=0.1;
	float h3=max(k3-abs(a3-b3),0.0);
	float zz3= (1.0 / 6.0) / (k3*k3);
	float cosTheta2=cos(iTime/3.0);
	float sinTheta2=sin(iTime/3.0);
	vec3 rot2=vec3(p.x*cosTheta2+p.y*-sinTheta2,p.y*cosTheta2+p.x*sinTheta2,p.z);
	float cosTheta3=cos(iTime/10.0);
	float sinTheta3=sin(iTime/10.0);
    vec3 rot3=vec3(p.x*cosTheta3+p.z*+sinTheta3,p.y,p.z*cosTheta3+p.x*-sinTheta3);
	vec3 box2=vec3(100.0,100.0,1.0);
	vec3 q2=abs(rot3)-box2;
	float a4=-(length(max(q2,0.0))+min(max(q2.x,max(q2.y,q2.z)),0.0));
	float b4=length(vec2(length(rot3.xz)-4.0,rot3.y))-0.25;
	float k4=0.1;
	float h4=max(k4-abs(a4-b4),0.0);
	float zz4= (1.0 / 6.0) / (k4*k4);
	float returnValue= min(min(min((max(a1,b1)+h1*h1*h1*zz1)*0.5,max(a3,b3)+h3*h3*h3*zz3),length(vec2(length(rot2.xz)-8.0,rot2.y))-0.5),max(a4,b4)+h4*h4*h4*zz4);
    //returnValue = (returnValue)+.125;
    return returnValue*1.0;
}


float getDistABrainThing(in vec3 q){

    //another simple test object 
    vec3 p = vec3(
        q.x*cos(iTime/7.0)+q.z*-sin(iTime/7.0),
        q.y
        ,q.z*cos(iTime/7.0)+q.x*sin(iTime/7.0)
        );

    //float s = length(p) - 1.0;
   // return s;
	vec3 scale1=p/2.0;
	float onion1=0.01;
	float scaleA2=7.518796992481203;
	float scaleB2=7.518796992481203;
	float offsetA2=0.0;
	float offsetB2=0.0;
	float scaleA1=2.0;
	float scaleB1=2.0;
	float offsetA1=0.0;
	float offsetB1=0.0;
	float a2=-(abs(dot(sin(scale1.xyz*scaleA2+offsetA2),cos(scale1.yzx*scaleB2+offsetB2)))-onion1);
	float b2=dot(sin(scale1.xyz*scaleA1+offsetA1),cos(scale1.yzx*scaleB1+offsetB1));
	float k2=1.0;
	float h2=max(k2-abs(a2-b2),0.0);
	float zz2= (1.0 / 6.0) / (k2*k2);
	float radius1 =5.0;
	float a1=(max(a2,b2)+h2*h2*h2*zz2);
	float b1=length(scale1)-radius1;
	float k1=1.0;
	float h1=max(k1-abs(a1-b1),0.0);
	float zz1= (1.0 / 6.0) / (k1*k1);
	float returnValue= (max(a1,b1)+h1*h1*h1*zz1)*2.0;
    return returnValue;
    //returnValue = (returnValue)+.125;
    //return returnValue*1.0;
}

float map(in vec3 q){

    //return 1.0;
    vec3 p=q;

    float lookDown=.2;
    p=vec3(p.x,p.y*cos(lookDown)+p.z*-sin(lookDown),p.z*cos(lookDown)+p.y*sin(lookDown));

    float rot = 4.25;

     p =vec3(
        p.x*cos(iTime/rot)+p.z*-sin(iTime/rot),
        p.y
        ,p.z*cos(iTime/rot)+p.x*sin(iTime/rot)
        );

    p=p+vec3(0.,-2.,0.);
    

    return map1(p);
 }
    
    

float getDist(in vec3 q){
    return (map(q)*0.5);
}



float getDist(in vec3 q, in float addl){
    //return (getDistA(q)*0.75)+addl;
    return map(q);
}

//float MAX_STEPS = 80.0;
float MAX_DIST = 500.0;




vec3 getSurfaceNormal(vec3 p, float epsilon){
    float epsilon2 = epsilon/5.0;
    vec3 xPlus = vec3(p.x+epsilon2,p.y,p.z);
    vec3 xMinus = vec3(p.x-epsilon2,p.y,p.z);
    vec3 yPlus = vec3(p.x,p.y+epsilon2,p.z);
    vec3 yMinus = vec3(p.x,p.y-epsilon2,p.z);
    vec3 zPlus = vec3(p.x,p.y,p.z+epsilon2);
    vec3 zMinus = vec3(p.x,p.y,p.z-epsilon2);
    
    float slopex = map(xPlus)-map(xMinus);
    float slopey = map(yPlus)-map(yMinus);
    float slopez = map(zPlus)-map(zMinus);
    return normalize(vec3(slopex,slopey,slopez));
}

void rayMarchOK(
    in vec3 origin, 
    in vec3 ray, 
    in float epsilon,
    in float maxSteps,
    out vec3 marchPosition,
    out float stepsTaken,
    out float finalDist,
    out float totalDist,
    out float closestDist
){
    //raymarcher will always attempt to go the entire distance.
    //if the distance field is not even, reduce the distance returned
    //from that field by a resonable percentage to avoid any overstep.
    
    float minDist=10.;
    marchPosition=origin+ray*minDist;
    
    float h = getDist(marchPosition);
    stepsTaken = 0.0;
    closestDist=MAX_DIST;
    
    
    
    while (h>epsilon&&stepsTaken++<maxSteps&&h<MAX_DIST){
        marchPosition+=ray*h;
        h=getDist(marchPosition);
        closestDist=min(closestDist,h);
    }
    
   
    finalDist=h;
    totalDist=length(origin-marchPosition);

}
void rayMarch(
    in vec3 origin, 
    in vec3 ray, 
    in float epsilon,
    in float maxSteps,
    
    out vec3 marchPoint,//intersection point or off somehwhere in space
    out float marchPointDist,//distance of the end of our ray from the nearest object
    out float stepsTaken//how many steps it took to determine what happened.


){
    //raymarcher will always attempt to go the entire distance.
    //if the distance field is not even, reduce the distance returned
    //from that field by a resonable percentage to avoid any overstep.
    
  
    
    stepsTaken = 0.0;
    marchPoint=origin;
    float h = getDist(marchPoint);//calculate initial distance
    while (h>epsilon&&stepsTaken++<maxSteps&&h<MAX_DIST){
        marchPoint+=ray*h;       
        h=getDist(marchPoint);
    }   
    marchPointDist=h;
}

void rayMarch(
    in vec3 origin, 
    in vec3 ray, 
    in float epsilon,
    in float maxSteps,
    in float addl,
    
    out vec3 marchPoint,//intersection point or off somehwhere in space
    out float marchPointDist,//distance of the end of our ray from the nearest object
    out float stepsTaken//how many steps it took to determine what happened.


){
    //raymarcher will always attempt to go the entire distance.
    //if the distance field is not even, reduce the distance returned
    //from that field by a resonable percentage to avoid any overstep.
    
  
    
    stepsTaken = 0.0;
    marchPoint=origin;
    float h = getDist(marchPoint);//calculate initial distance
    while (h>epsilon&&stepsTaken++<maxSteps&&h<MAX_DIST){
        marchPoint+=ray*h;       
        h=map(marchPoint);
    }   
    marchPointDist=h;
}



float gd(vec3 p, vec3 lightSource, float lightRadius){
    return length(lightSource-p)-lightRadius;
}
vec3 lightFieldNormal(vec3 p, vec3 lightSource, float lightRadius,float epsilon){
float epsilon2 = epsilon*8.0;//we may be far away!
   vec3 xp = vec3(p.x+epsilon2,p.y,p.z);
   vec3 xm = vec3(p.x-epsilon2,p.y,p.z);
   
   vec3 yp = vec3(p.x,p.y+epsilon2,p.z);
   vec3 ym = vec3(p.x,p.y-epsilon2,p.z);
   
   vec3 zp = vec3(p.x,p.y,p.z+epsilon2);
   vec3 zm = vec3(p.x,p.y,p.z-epsilon2);
   
   float dx = gd(xp,lightSource,lightRadius)-gd(xm,lightSource,lightRadius);
   float dy = gd(yp,lightSource,lightRadius)-gd(ym,lightSource,lightRadius);
   float dz = gd(zp,lightSource,lightRadius)-gd(zm,lightSource,lightRadius);
   
   return normalize(vec3(dx,dy,dz));
   
   
}


float softShadowExperimental(vec3 p, vec3 lightSource, float epsilon, float k){
    
    float maxSteps = 900.0;
   
    vec3 marchPoint;
    float marchPointDist;
    float steps;
    vec3 ray = normalize(lightSource-p);
    rayMarch(p,ray,epsilon,maxSteps,marchPoint,marchPointDist,steps);
    if (marchPointDist<=epsilon||steps>=maxSteps){
        return 0.0;
    }
    
    return max(1.-(max(steps-k*5.,0.)*k/maxSteps),.0);
  
}

float softShadowExperimental7(vec3 p, vec3 lightSource, float epsilon, float k){
    
    float maxSteps = 900.0;
   
    vec3 marchPoint;
    float marchPointDist;
    float steps;
    vec3 ray = normalize(lightSource-p);
    float addl=-1.5;
    rayMarch(p,ray,epsilon,maxSteps,0.,marchPoint,marchPointDist,steps);
    float first;
    float second;
    if (marchPointDist<=epsilon||steps>=maxSteps){
        first=0.0;
    }
    else{
        first=1.;
    }
    rayMarch(p,ray,epsilon,maxSteps,-addl,marchPoint,marchPointDist,steps);
    if (marchPointDist<=epsilon||steps>=maxSteps){
        second=0.0;
    }
    else{
        second=1.;
    }
    //return second;
    return (first+second)/2.;
    //return max(1.-(max(steps-k*5.,0.)*k/maxSteps),.0);
  
}

float softShadowBalanced(vec3 surface, vec3 light, float radius){
    //surface=surface point
    //light=light position
    //radius=light radius (as if it where a radiating sphere) - larger radius creates softer shadows.
    //based on Inigo Quilez's soft shadow routine, but includes interior distances.
    //only slighty more expensive.
    
    //Think of an inverted cone where the point is at the origin and the circle is at the light, the size
    //of the circle is the radius of the light source. Part of the cone will be blocked by the object.
    //We are caclulating how much of it is blocked. The center of the cone may even travel through the object.
    //but if part of the cone is outside, there will still be light at the point on the object's surface.
    //because the light source is not a single point.
    
   
      
    vec3 surfaceToLight = light-surface;
    float distanceToLight=length(surfaceToLight);
    vec3 ray =normalize(surfaceToLight);
    float artifactCompensation = 1.0;//TODO base this off of distance to observer.
    float minDist = .001;//think about this.
    
    float travelled = minDist;
    float xx=1.0;
    while (travelled < distanceToLight){//no need to march beyond the light.
    
        float ratioTravelled=travelled/distanceToLight;
        
        //a cone with point at surface and circle at light with radius = light radius...
        float relativeRadius=ratioTravelled*radius;
        
        float dist=map(surface+ray*travelled);
         
        if (dist<-relativeRadius){
            return 0.0;
        }
        float relativeDiameter=relativeRadius*2.0;
        
        float dist2=dist+relativeRadius;
        xx = min(xx,dist2/relativeDiameter);
        // travelled +=max(abs(dist/8.),minDist);
       
       
        
        //travelled +=max(abs(oneSixthRadius*dist/radius),minDist);
        travelled +=max(abs(dist/artifactCompensation),minDist);
        
        
    }
       
   return xx;
    

    
}



float shadow(vec3 p, vec3 lightSource, float epsilon){
    
    float maxSteps = 900.0;
   
    vec3 marchPoint;
    float marchPointDist;
    float steps;
    vec3 ray = normalize(lightSource-p);
    rayMarch(p,ray,epsilon,maxSteps,marchPoint,marchPointDist,steps);
    if (marchPointDist<=epsilon){//||steps>=maxSteps){
        return 0.0;
    }
    
    return 1.0;
  
}
vec3 power(vec3 vec, float power){
    return vec3(pow(vec.x,power),pow(vec.y,power),pow(vec.z,power));
}

//https://iquilezles.org/www/articles/rmshadows/rmshadows.htm
float softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )
{
    float res = 1.0;
    for( float t=mint; t<maxt; )
    {
        float h = map(ro + rd*t);
        if( h<0.001 )
            return 0.0;
        res = min( res, k*h/t );
        t += h;
    }
    return res;
}


void calcLight(
    in vec3 surfacePoint, 
    in float shineAtPosition,//look up material first
    in vec3 lightPosition,
    in vec3 observationPosition,
    in vec3 lightColor,
    in float lightBrightness,
    in vec3 surfaceNormal,
    in float epsilon,
    out vec3 diffuse, 
    out vec3 specular){
    
    //float ambientO=1.0-((stepsTaken/maxSteps)*(stepsTaken/maxSteps));
     
    vec3 col0 = lightColor;
    
    
    vec3 surfaceToLight=lightPosition-surfacePoint;
    vec3 normalToLight=normalize(surfaceToLight);
    
    float oneOverDistToLightSquared = lightBrightness/dot(surfaceToLight,surfaceToLight);
    
    
    
    float dp = dot(normalToLight,surfaceNormal);
    //float specBlocked = dp<0.5?0.0:1.0;
    dp=max(dp,0.0);
    
    //dp+=1.0;
    //dp/=2.0;
    
    diffuse=dp*lightColor*oneOverDistToLightSquared;
    
    
    vec3 rayToObs=normalize(observationPosition-surfacePoint);
    vec3 avg = normalize(normalToLight+rayToObs);
    float spec = dot(avg,surfaceNormal);
    spec = max(spec,0.0);
    
    spec = pow(spec,shineAtPosition);
    /*
    spec*=spec;//this is shinyness
    spec*=spec;//ultimately this needs to become part of the object def not the light.
    spec*=spec;
    spec*=spec;
    spec*=spec;
    spec*=spec;
    */
    specular=lightColor*spec*oneOverDistToLightSquared;//work in shinyness here
    
    float shadowAdjust = 1.0;
    
    //float s = softShadowExperimental(surfacePoint,lightPosition,epsilon,10.);
    //float s = softshadow(surfacePoint,normalToLight,1.2,length(surfaceToLight),20.);
    //float s = softshadow(surfacePoint,normalToLight,1.2,1000.,20.);
    
    float s = softShadowBalanced(surfacePoint,lightPosition,50.0);
    //s=shadow(surfacePoint,lightPosition,epsilon);
    
    diffuse*=s*shadowAdjust;

    specular*=s*shadowAdjust;
    //specular=vec3(0,0,0);
    
    
    
    
}


void mainImage( out vec4 fragColor, in vec2 fragCoord )
{


    vec3 eye = vec3(0.0,0.0,-.5);
    vec3 lense = vec3(0.0,0.0,.5);
    float xxx = 100.;
    vec3 cameraPosition = vec3(0.,0.,-(180.+xxx)+sin(iTime/10.)*xxx);
    float specAmt = 0.0;

    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
    float epsilon1 = .0005;
    
   
    vec3 objColor=vec3(1,1,1);
    
    //vec3 lightPosition1 = vec3(600.0,400.0,-400.0);
   // vec3 lightColor1 = vec3(0,0,0);
    
   // vec3 lightPosition2 = vec3(-400.0,400.0,-400.0);
   // vec3 lightColor2 = vec3(1.0,.9,.9);
    
    
    vec2 ar = (fragCoord/iResolution.x)
        -vec2(.5,iResolution.y/(2.0*iResolution.x));
    vec3 lenseIntersection = vec3(ar,lense.z);
    
    vec3 ray = normalize(lenseIntersection-eye);
   
    
    float stepsTaken;
    vec3 finalPosition;
    float finalDistance;

    float maxSteps = 4000.0;
    
    rayMarch(eye+cameraPosition,ray,epsilon1,maxSteps,finalPosition,finalDistance,stepsTaken);
    
    
    
    //float dpl1 = dot(normalize(lightPosition1),normal);//inifinite distance light
    //dpl1+=1.0;
    //dpl1/=2.0;
    //float dpl1Spec = dpl1*dpl1*dpl1*dpl1*dpl1*dpl1;
    //dpl1+=dpl1Spec*specAmt;
    
    
    //float dpl2 = dot(normalize(lightPosition2),normal);//inifinite distance light
    //dpl2+=1.0;
    //dpl2/=2.0;
    //float dpl2Spec = dpl2*dpl2*dpl2*dpl2*dpl2*dpl2;
    //dpl2+=dpl2Spec*specAmt;
    
    float objectShine=7.;
    
    
    vec3 diffuse1;
    vec3 specular1;

    vec3 diffuse2;
    vec3 specular2;

    vec3 diffuse3;
    vec3 specular3;

    vec3 diffuse4;
    vec3 specular4;
    if (finalDistance<epsilon1){
    
        //we hit something. let's do a bit more work...
        //back off a slight bit...
        finalPosition = finalPosition+(ray*epsilon1*-2.0);
        vec3 normal = getSurfaceNormal(finalPosition,epsilon1);
        
       
        
        float lightBrightness = 70000.;
        float specMult = 2.0;
        
        calcLight(
            finalPosition,
            objectShine,
            vec3(600.0,800.0,-800.0),//lightposition
            eye+cameraPosition,//observation position
            vec3(.5,.5,1)*.5,//light color
            lightBrightness*20.,//light bright
            normal,
            epsilon1,
            diffuse1,
            specular1
        );
        
        calcLight(
            finalPosition,
            objectShine,
            vec3(-600.0,300.0,-400.0),//lightposition
            eye+cameraPosition,//observation position
            vec3(1,.5,.1)*.5,//light color
            lightBrightness*10.,//light bright
            normal,
            epsilon1,
            diffuse2,
            specular2
        );
        
        calcLight(
            finalPosition,
            objectShine,
            vec3(130.0,30.0,-40.0),//lightposition
            eye+cameraPosition,//observation position
            vec3(.3,.7,.3)*.5,//light color
            lightBrightness/5.,//light bright
            normal,
            epsilon1,
            diffuse3,
            specular3
        );
        
        calcLight(
            finalPosition,
            objectShine,
            vec3(0.0,10.0,-5.0),//lightposition
            eye+cameraPosition,//observation position
            vec3(1.,.8,.5)*.5,//light color
            lightBrightness/20000.,//light bright
            normal,
            epsilon1,
            diffuse4,
            specular4
        );
    
    
    
        vec3 col1=objColor*max(diffuse1,0.0);
        col1+=specular1*specMult;
        
        vec3 col2=objColor*max(diffuse2,0.0);
        col2+=specular2*specMult;
        
        vec3 col3=objColor*max(diffuse3,0.0);
        col3+=specular3*specMult;
        
        vec3 col4=objColor*max(diffuse4,0.0);
        col4+=specular4*specMult;
        
        
        //col1*=ambientO;                
        //col1 *=shadow(finalPosition,lightPosition1,epsilon1,8.);
        
        //col2*=max(dpl2,0.0);
        //col2*=ambientO;      
        
        //col2 *=shadow(finalPosition,lightPosition2,epsilon1,8.);
        
        //col1*=1.0;
       // col2*=1.0;
        
        //vec3 colFinal = min(col1+col2,1.0);
        vec3 colFinal = min(col1+col2+col3+col4,1.);
        colFinal=power(colFinal,.9);
        fragColor = vec4(colFinal,1.0);
        
    }
    else{
        fragColor = vec4(0,0,0,1.0);

    }
    
    
    
    //fragColor = vec4(vec3(diffuse1),1.0);
    


    // Time varying pixel color
    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));

    // Output to screen
    
}